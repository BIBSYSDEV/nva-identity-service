AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Stack for Cognito and users, roles and customer institution services.

#
#  After Cognito has been created it must be registered with Feide
#  The user pools service provider URN is: urn:amazon:cognito:sp:<user_pool_id>
#
#  Information needed is:
#
#    Amazon Cognito Domain:  https://nva-test.auth.eu-west-1.amazoncognito.com
#    Amazon Cognito URN:     urn:amazon:cognito:sp:eu-west-1_JRPabH2jf
#

Parameters:
  # Parameters from Cognito
  AuthenticationDomainPrefix:
    Type: String
    Default: nva-develop
    Description: The prefix for the Cognito domain that hosts the sign-up and sign-in pages for your application.
  ExternalAuthenticationDomainPrefix:
    Type: String
    Default: nva-develop-ext
    Description: Authentication url prefix for external users
  FeideMetadataUrl:
    Type: String
    AllowedValues:
      - https://idp-test.feide.no/simplesaml/saml2/idp/metadata.php
      - https://idp.feide.no/simplesaml/saml2/idp/metadata.php
    Description: Link to the the identity provider details. Use test for non prod environments.
  ParameterNamePrefix:
    Type: String
    Description: Prefix used for naming parameters.
    Default: ''
  ApiDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/ApiDomain
    Description: Domain-name for the backend
  CristinBotFilterBypassHeaderName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: CristinBotFilterBypassHeaderName
    Description: Header name of http request header to use to bypass bot filter in requests to Cristin API.
  CristinBotFilterBypassHeaderValue:
    Type: AWS::SSM::Parameter::Value<String>
    Default: CristinBotFilterBypassHeaderValue
    Description: Header value of http request header to use to bypass bot filter in requests to Cristin API.
  CristinApiUrl:
    Type: String
    Description: Url for Cristin API
    Default: https://api.cristin-test.uio.no/v2
    AllowedValues:
      - https://api.cristin-test.uio.no/v2
      - https://api.cristin.no/v2
  ApplicationDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/ApplicationDomain
    Description: Domain-name for the frontend
  SiktCristinId:
    Type: String
    Default: https://api.dev.nva.aws.unit.no/cristin/organization/20754.0.0.0
    Description: The Cristin ID for SIKT
  # Parameters from nva-user-access-service
  UsersAndRolesBasePath:
    Type: String
    Default: users-roles
  # Parameter from nva-customer-api
  CustomerDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain for Customer service
    Default: customer
  ExternalUserScopeIdentifier:
    Type: String
    Description: Identifier for external scope
    Default: https://api.nva.unit.no/scopes/third-party
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.
  SlackSnsArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/NVA/Monitoring/SlackSnsArn'
  AllowedOrigins:
    Type: String
    Description: comma separated list of external clients that are allowed to contact the HTTP APIs, "*" indicates that all origins are allowed
    Default: '*'

Mappings:
  Constants:
    Cognito:
      UserPoolNamePrefix: IdentityService-UserPool-
      ExternalUserPoolNamePrefix: IdentityService-ExternalUserPool-

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Globals:
  Function:
    MemorySize: 1769
    Timeout: 10
    Runtime: java17
    Tracing: Active
    Environment:
      Variables:
        API_DOMAIN: !Ref ApiDomain
        CRISTIN_API_URL: !Ref CristinApiUrl
        CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
        BY_ORG_DOMAIN_INDEX_NAME: byOrgDomain
        BY_CRISTIN_ID_INDEX_NAME: byCristinId
        USERS_AND_ROLES_TABLE: !Ref UserRoleMappings
        COGNITO_HOST: !Sub '${AuthenticationDomainPrefix}.auth.${AWS::Region}.amazoncognito.com'
        BOT_FILTER_BYPASS_HEADER_NAME: !Ref CristinBotFilterBypassHeaderName
        BOT_FILTER_BYPASS_HEADER_VALUE: !Ref CristinBotFilterBypassHeaderValue
  Api:
    Cors:
      AllowMethods: '''POST, PUT, GET,OPTIONS'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''
    OpenApiVersion: 3.0.1

Resources:

  ### Cognito ##########################################################################################################

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: True
      CognitoIdentityProviders:
        - ClientId: !Ref ApplicationClient
          ProviderName: !Sub 'cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'
        - ClientId: !Ref DLRApplicationClient
          ProviderName: !Sub 'cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'

  UpdateCognintoUserAttributesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: accessToCustomers
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NvaCustomersTable}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NvaCustomersTable}/index/*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserRoleMappings}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserRoleMappings}/index/*'
        - PolicyName: writeLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: CommunicationWithCognito
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AddCustomAttributes
                  - cognito-idp:DescribeUserPoolClient
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:ListUserPoolClients
                  - cognito-idp:CreateGroup
                  - cognito-idp:GetGroup
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
              - Effect: Allow
                Action:
                  - cognito-idp:ListUserPools
                  - cognito-idp:GetUser
                  - cognito-idp:DescribeUserPoolDomain
                Resource: "*"

  CreateUsersRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess # Policy for allowing tracing in Xray
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: CommunicationWithCognito
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AddCustomAttributes
                  - cognito-idp:DescribeUserPoolClient
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:ListUserPoolClients
                  - cognito-idp:CreateGroup
                  - cognito-idp:GetGroup
                  - cognito-idp:DescribeResourceServer
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
              - Effect: Allow
                Action:
                 - cognito-idp:ListUserPools
                 - cognito-idp:GetUser
                 - cognito-idp:DescribeUserPoolDomain
                Resource: "*"
        - PolicyName: DatabasePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NvaCustomersTable}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NvaCustomersTable}/index/*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserRoleMappings}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UserRoleMappings}/index/*'
        - PolicyName: SecretPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                   - secretsmanager:GetResourcePolicy
                   - secretsmanager:GetSecretValue
                   - secretsmanager:DescribeSecret
                   - secretsmanager:ListSecretVersionIds
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:BackendCognitoClientCredentials*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:CristinClientBasicAuth*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetRandomPassword
                  - secretsmanager:ListSecrets
                Resource: '*'
        - PolicyName: ExternalUserPoolClients
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:ListResourceServers
                  - cognito-idp:CreateUserPoolClient
                  - cognito-idp:DescribeUserPoolClient
                  - cognito-idp:ListUserPoolClients
                Resource: !GetAtt ExternalUserPool.Arn

  ### User Access Service ##############################################################################################

  UserRoleMappings:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub 'nva-users-and-roles-${AWS::StackName}'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: PrimaryKeyHashKey
          AttributeType: S
        - AttributeName: PrimaryKeyRangeKey
          AttributeType: S
        - AttributeName: SecondaryIndex1HashKey
          AttributeType: S
        - AttributeName: SecondaryIndex1RangeKey
          AttributeType: S
        - AttributeName: SecondaryIndex2HashKey
          AttributeType: S
        - AttributeName: SecondaryIndex2RangeKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PrimaryKeyHashKey
          KeyType: HASH
        - AttributeName: PrimaryKeyRangeKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SearchUsersByInstitution
          KeySchema:
            - AttributeName: SecondaryIndex1HashKey
              KeyType: HASH
            - AttributeName: SecondaryIndex1RangeKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: SearchUsersByCristinIdentifiers
          KeySchema:
            - AttributeName: SecondaryIndex2HashKey
              KeyType: HASH
            - AttributeName: SecondaryIndex2RangeKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: IncludedInBackup
          Value: 'true'

  UsersAndRolesAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 180
  
  UsersAndRolesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      AccessLogSetting:
        DestinationArn: !GetAtt UsersAndRolesAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/users-and-roles-swagger.yaml

  GetRoleHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.GetRoleHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UserRoleMappings
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /roles/{role}
            Method: get
            RestApiId: !Ref UsersAndRolesApi

  CreateUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.CreateUserHandler::handleRequest
      Role: !GetAtt CreateUsersRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          API_DOMAIN: !Ref ApiDomain
          CRISTIN_API_URL: !Ref CristinApiUrl
          COGNITO_CREDENTIALS_SECRET_NAME: BackendCognitoClientCredentials
          COGNITO_ID_KEY: backendClientId
          COGNITO_SECRET_KEY: backendClientSecret
          #TODO rename ID_NAMESPACE to CUSTOMER_ID_NAMESPACE
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref UsersAndRolesApi

  UpdateUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.UpdateUserHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserRoleMappings
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: put
            RestApiId: !Ref UsersAndRolesApi

  GetUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.GetUserHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UserRoleMappings
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: get
            RestApiId: !Ref UsersAndRolesApi

  GetCurrentTermsConditionsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.GetCurrentTermsConditionsHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /terms-and-conditions/current
            Method: get
            RestApiId: !Ref UsersAndRolesApi

  UpdateTermsConditionsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.UpdateTermsConditionsHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaPersonInfoTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaPersonInfoTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/mine/accepted-terms
            Method: put
            RestApiId: !Ref UsersAndRolesApi

  CustomerSelectionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-pre-token-generation-openid
      Handler: no.unit.nva.cognito.CustomerSelectionHandler::handleRequest
      Role: !GetAtt UpdateCognintoUserAttributesRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId: !Ref UsersAndRolesApi

  CognitoUserInfoHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-pre-token-generation-openid
      Handler: no.unit.nva.cognito.CognitoUserInfoEndpoint::handleRequest
      Role: !GetAtt UpdateCognintoUserAttributesRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /userinfo
            Method: get
            RestApiId: !Ref UsersAndRolesApi

  ListByInstitutionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.ListByInstitutionHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UserRoleMappings
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /institutions/users
            Method: get
            RequestParameters:
              - method.request.querystring.institution:
                  Required: true
            RestApiId: !Ref UsersAndRolesApi

  InitIdenitityServiceHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.IdentityServiceInitHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          SIKT_CRISTIN_ID: !Ref SiktCristinId
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
          BACKEND_CLIENT_ID: !Ref BackendApplicationClient
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserRoleMappings
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable

  MigrateCuratorsIdenitityServiceHandler:
    Type: AWS::Serverless::Function
    Description: 'Migrated users that has Curator role to instead have support, doi, nvi, and file-curator'
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.IdentityServiceMigrateCuratorHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          SIKT_CRISTIN_ID: !Ref SiktCristinId
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserRoleMappings
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable

  SetImpersonationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.SetImpersonationHandler::handleRequest
      Role: !GetAtt UpdateCognintoUserAttributesRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /impersonation
            Method: post
            RestApiId: !Ref UsersAndRolesApi

  StopImpersonationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.StopImpersonationHandler::handleRequest
      Role: !GetAtt UpdateCognintoUserAttributesRole.Arn
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          USER_POOL_ID: !GetAtt UserPool.UserPoolId
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /impersonation/stop
            Method: post
            RestApiId: !Ref UsersAndRolesApi

  CreateExternalClientHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.CreateExternalClientHandler::handleRequest
      Role: !GetAtt CreateUsersRole.Arn
      Description: Creates a new Cognito Client assosicated with the external user pool
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          API_DOMAIN: !Ref ApiDomain
          EXTERNAL_USER_POOL_ID: !Ref ExternalUserPool
          EXTERNAL_USER_POOL_URL: !Sub 'https://${ExternalUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/oauth2/token'
          EXTERNAL_SCOPE_IDENTIFIER: !Ref ExternalUserScopeIdentifier
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /external-clients
            Method: post
            RestApiId: !Ref UsersAndRolesApi

  GetExternalClientUserinfoHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.GetExternalClientUserinfoHandler::handleRequest
      Role: !GetAtt CreateUsersRole.Arn
      Description: Access stored external client info by its token
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          API_DOMAIN: !Ref ApiDomain
          EXTERNAL_USER_POOL_ID: !Ref ExternalUserPool
          EXTERNAL_USER_POOL_URL: !Sub 'https://${ExternalUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/oauth2/token'
          EXTERNAL_SCOPE_IDENTIFIER: !Ref ExternalUserScopeIdentifier
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /external-clients
            Method: get
            RestApiId: !Ref UsersAndRolesApi

  GetExternalClientHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.GetExternalClientHandler::handleRequest
      Role: !GetAtt CreateUsersRole.Arn
      Description: Get a store external client and its details
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          API_DOMAIN: !Ref ApiDomain
          EXTERNAL_USER_POOL_ID: !Ref ExternalUserPool
          EXTERNAL_USER_POOL_URL: !Sub 'https://${ExternalUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/oauth2/token'
          EXTERNAL_SCOPE_IDENTIFIER: !Ref ExternalUserScopeIdentifier
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /external-clients/{clientId}
            Method: get
            RestApiId: !Ref UsersAndRolesApi

  UsersAndRolesApiStaticUrl:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub '${UsersAndRolesBasePath}-${Suffix}'
        - !Sub '${UsersAndRolesBasePath}'
      DomainName: !Ref ApiDomain
      RestApiId: !Ref UsersAndRolesApi
      Stage: !Ref UsersAndRolesApi.Stage

  ### Customer Service #################################################################################################

  NvaCustomersTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete # DeletionPolicy should be added on main branch stacks through use of stack policy
    Properties:
      TableName: !Sub 'nva-customers-${AWS::StackName}'
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: identifier
          AttributeType: S
        - AttributeName: feideOrganizationDomain
          AttributeType: S
        - AttributeName: cristinId
          AttributeType: S
      KeySchema:
        - AttributeName: identifier
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: byOrgDomain
          KeySchema:
            - AttributeName: feideOrganizationDomain
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: byCristinId
          KeySchema:
            - AttributeName: cristinId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: IncludedInBackup
          Value: 'true'

  NvaPersonInfoTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Properties:
      TableName: !Sub nva-id-type-persistent-objects-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: type
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: IncludedInBackup
          Value: 'true'

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

  NvaCustomerApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/customer-swagger.yaml

  NvaCreateCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.create.CreateCustomerHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaCustomerApi

  NvaGetCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.get.GetCustomerHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetCustomerEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: get
            RestApiId: !Ref NvaCustomerApi

  NvaGetCustomerDoiAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Role: !GetAtt CustomerSecretAdminRole.Arn
      Handler: no.unit.nva.customer.get.GetCustomerDoiHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Events:
        GetCustomerDoiEvent:
          Type: Api
          Properties:
            Path: /{identifier}/doiagent
            Method: get
            RestApiId: !Ref NvaCustomerApi

  NvaUpdateCustomerDoiAgentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Role: !GetAtt CustomerSecretAdminRole.Arn
      Handler: no.unit.nva.customer.update.UpdateCustomerDoiHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        UpdaterCustomerDoiEvent:
          Type: Api
          Properties:
            Path: /{identifier}/doiagent
            Method: put
            RestApiId: !Ref NvaCustomerApi

  NvaGetCustomerVocabulariesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.get.GetControlledVocabularyHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetCustomerEvent:
          Type: Api
          Properties:
            Path: /{identifier}/vocabularies
            Method: get
            RestApiId: !Ref NvaCustomerApi
  NvaCreateCustomerVocabulariesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.create.CreateControlledVocabularyHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetCustomerEvent:
          Type: Api
          Properties:
            Path: /{identifier}/vocabularies
            Method: post
            RestApiId: !Ref NvaCustomerApi
  NvaUpdateCustomerVocabulariesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.update.UpdateControlledVocabularyHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetCustomerEvent:
          Type: Api
          Properties:
            Path: /{identifier}/vocabularies
            Method: put
            RestApiId: !Ref NvaCustomerApi
  NvaGetCustomerByOrgDomainFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.get.GetCustomerByOrgNumberHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetByOrgDomainEvent:
          Type: Api
          Properties:
            Path: /orgDomain/{orgDomain}
            Method: get
            RestApiId: !Ref NvaCustomerApi
  NvaGetCustomerByCristinIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.get.GetCustomerByCristinIdHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetByCristinIdEvent:
          Type: Api
          Properties:
            Path: /cristinId/{cristinId}
            Method: get
            RestApiId: !Ref NvaCustomerApi
  NvaListAllCustomersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.get.ListAllCustomersHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref NvaCustomerApi
  NvaUpdateCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.update.UpdateCustomerHandler::handleRequest
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: put
            RestApiId: !Ref NvaCustomerApi
  CustomerBatchScanHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: customer
      Handler: no.unit.nva.customer.CustomerBatchScanHandler::handleRequest
      Environment:
        Variables:
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE:
            Fn::Sub: https://${ApiDomain}/${CustomerDomainBasePath}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable

  NvaCustomerBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub '${CustomerDomainBasePath}-${Suffix}'
        - !Sub '${CustomerDomainBasePath}'
      DomainName: !Ref ApiDomain
      RestApiId: !Ref NvaCustomerApi
      Stage: !Ref NvaCustomerApi.Stage

  ### Events ############################################################################################################
  StartBatchScanHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-event-handlers
      Handler: no.unit.nva.useraccess.events.StartBatchScan::handleRequest
      Role: !GetAtt BatchScanRole.Arn
      Environment:
        Variables:
          EVENT_BUS: !GetAtt InternalBus.Name

  EventBasedBatchScanHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-event-handlers
      Handler: no.unit.nva.useraccess.events.EventBasedScanHandler::handleRequest
      Role: !GetAtt BatchScanRole.Arn
      Timeout: 900
      Environment:
        Variables:
          USERS_AND_ROLES_TABLE: !Ref UserRoleMappings
          EVENT_BUS: !GetAtt InternalBus.Name
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
      Events:
        ScanIdentityServiceEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt InternalBus.Name
            Pattern:
              detail:
                topic:
                  - IdentityService.IdentityEntry.ScanAndUpdate

  InternalBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join [ '',[ 'identity-service-internal-bus',!Ref Suffix ] ]

  ### Roles ############################################################################################################
  BatchScanRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

  CustomerSecretAdminRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DatabasePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NvaCustomersTable}'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${NvaCustomersTable}/index/*'

  DefaultLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DefaultLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref BatchScanRole
        - !Ref CustomerSecretAdminRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:InvokeFunction
            Resource: "*"

  ScanUsersTablePermission:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ScanUsersTablePermission-${AWS::StackName}
      Roles:
        - !Ref BatchScanRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:*
            Resource:
              - !GetAtt UserRoleMappings.Arn
              - !GetAtt NvaCustomersTable.Arn

  DataCiteCustomerSecretPermission:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DataCiteCustomerSecretPermission-${AWS::StackName}
      Roles:
        - !Ref CustomerSecretAdminRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
              - secretsmanager:UpdateSecret
            Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dataCiteCustomerSecrets*'

  EventsLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub EventsLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref BatchScanRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - events:*
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
            Resource: '*' # TODO: restrict the access to specific resources after we have established that the message is sent.

  ### Parameters #######################################################################################################

  CognitoAuthenticationDomainPrefixParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoAuthenticationDomainPrefix'
      Description: The prefix for the Cognito domain that hosts the sign-up and sign-in pages for your application.
      Type: String
      Value: !Ref AuthenticationDomainPrefix

  CognitoAuthenticationDomainParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoAuthenticationDomain'
      Description: The full Cognito domain that hosts the sign-up and sign-in pages for your application.
      Type: String
      Value: !Sub '${AuthenticationDomainPrefix}.auth.${AWS::Region}.amazoncognito.com'

  CognitoFrontendApplicationUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoFrontendApplicationUrl'
      Description: A base URL for the callbacks for the identity providers.
      Type: String
      Value: !Sub 'https://${ApplicationDomain}'

  CognitoFrontendApplicationLogoutUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoFrontendApplicationLogoutUrl'
      Description: A base URL for the logout for the identity providers.
      Type: String
      Value: !Sub 'https://${ApplicationDomain}/logout'

  FeideMetadataUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}FeideMetadataUrl'
      Description: Link to the the identity provider details.
      Type: String
      Value: !Ref FeideMetadataUrl

  CognitoAuthorizerArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoAuthorizerArn'
      Description: ARN Identifier of the UserPool
      Type: String
      Value: !GetAtt UserPool.Arn

  ExternalCognitoAuthorizerArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}ExternalCognitoAuthorizerArn'
      Description: ARN Identifier of the External UserPool
      Type: String
      Value: !GetAtt ExternalUserPool.Arn

  ExternalCognitoAuthorizerUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}ExternalCognitoAuthorizerUrl'
      Description: The URL of the provider of the Amazon Cognito user pool
      Type: String
      Value: !GetAtt ExternalUserPool.ProviderURL

  CognitoIdentityPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoIdentityPoolId'
      Description: Identifier of the IdentityPool assosiated with the UserPool
      Type: String
      Value: !Ref IdentityPool

  CognitoUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Value: !Ref UserPool
      Description: Identifier of the UserPool in Cognito
      Name: !Sub '${ParameterNamePrefix}CognitoUserPoolId'
      Type: String

  CognitoUserPoolAppClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoUserPoolAppClientId'
      Description: Identifier to use for the app clients to access this user pool
      Type: String
      Value: !Ref ApplicationClient

  CognitoURNParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoURN'
      Description: URN of the cognito login to use in Feide
      Type: String
      Value: !Sub 'urn:amazon:cognito:sp:${UserPool}'

  #============================ Deploy API ============================================================================#
  # This solves the problem described here:
  # https://stackoverflow.com/questions/41423439/cloudformation-doesnt-deploy-to-api-gateway-stages-on-update
  #====================================================================================================================#

  ApiGatewayCreateDeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ApiGatewayAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${UsersAndRolesApi}/deployments'
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${NvaCustomerApi}/deployments'

### New Cognito ########################################################################################################

  UserPoolName:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Userpool's Backend client ID
      Name: /NVA/UserPoolName
      Type: String
      Value: !Sub
        - "${UserPoolName}${AWS::AccountId}"
        - UserPoolName: !FindInMap [ 'Constants', 'Cognito','UserPoolNamePrefix' ]

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      MfaConfiguration: "OFF"
      LambdaConfig:
        PreTokenGeneration: !Sub '${PreTokenGenerationHandler.Arn}'
      Schema:
        - Name: nin
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feideId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feidememberrole
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feideIdNin
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgFeideDomain
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: firstName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: lastName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: accessRights
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: customerId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: allowedCustomers
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: roles
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: nvaUsername
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: cristinId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: topOrgCristinId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: personAffiliation
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: impersonating
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: impersonatedBy
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: currentTerms
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: acceptedTerms
          AttributeDataType: String
          Mutable: true
          Required: false
      UsernameConfiguration:
        CaseSensitive: true
      UserPoolName: !GetAtt UserPoolName.Value

  CongitoAuthUri:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Cognito Authentication URI
      Name: /NVA/CognitoUri
      Type: String
      Value: !Sub 'https://${AuthenticationDomainPrefix}.auth.${AWS::Region}.amazoncognito.com'

  ConnectionToDataporten:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        custom:nin: https://n.feide.no/claims/nin
        custom:feideId: https://n.feide.no/claims/eduPersonPrincipalName
        custom:feidememberrole: eduPersonAffiliation
        custom:feideIdNin: norEduPersonNIN
        custom:orgFeideDomain: schacHomeOrganization
      ProviderDetails:
        client_id: '{{resolve:secretsmanager:DataportenClient:SecretString:clientId}}'
        client_secret: '{{resolve:secretsmanager:DataportenClient:SecretString:secret}}'
        attributes_request_method: POST
        oidc_issuer: 'https://auth.dataporten.no'
        authorize_url: 'https://auth.dataporten.no/oauth/authorization'
        token_url: 'https://auth.dataporten.no/oauth/token'
        attributes_url: 'https://api.dataporten.no/userinfo/v1/userinfo'
        jwks_uri: 'https://auth.dataporten.no/openid/jwks'
        authorize_scopes: 'openid email groups-edu groups-org peoplesearch profile userid userid-feide userid-nin userinfo-birthdate userinfo-name userinfo-photo'
      ProviderName: Dataporten
      ProviderType: OIDC
      UserPoolId: !Ref UserPool

  ResourceServerScopes:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: https://api.nva.unit.no/scopes
      Name: Scopes for backend
      Scopes:
        - ScopeDescription: Necessary scope for backend authentication to work
          ScopeName: backend
        - ScopeDescription: Frontend scope
          ScopeName: frontend
      UserPoolId: !Ref UserPool

  ResourceServerExternalScopes:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: !Ref ExternalUserScopeIdentifier
      Name: Scopes for external user pool
      Scopes:
        - ScopeDescription: Publications read
          ScopeName: publication-read
        - ScopeDescription: Publications write/update
          ScopeName: publication-upsert
        - ScopeDescription: Ticket read
          ScopeName: ticket-read
        - ScopeDescription: Ticket write/update
          ScopeName: ticket-upsert
        - ScopeDescription: Upload file
          ScopeName: file-upload
        - ScopeDescription: Read reporting data for publications and nvi candidates
          ScopeName: reporting-read
      UserPoolId: !Ref ExternalUserPool

  BackendApplicationClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      AllowedOAuthFlows:
          - client_credentials
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
         - https://api.nva.unit.no/scopes/backend
      ClientName: BackendApplicationClient
      CallbackURLs:
        - https://api.nva.unit.no/scopes # not necessary maybe.
      DefaultRedirectURI: https://api.nva.unit.no/scopes
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      IdTokenValidity: 15
      AccessTokenValidity: 15
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes

  BackendClientId:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: Userpool's Backend client ID
      Name: /NVA/BackendClientId
      Type: String
      Value: !Ref BackendApplicationClient

  ApplicationClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - openid
        - email
        - phone
        - profile # it seems to be necessary for the custom attributes to appear
        - https://api.nva.unit.no/scopes/frontend
      CallbackURLs:
        - 'http://localhost:3000'
        - !Sub 'https://${ApplicationDomain}'
      LogoutURLs:
        - 'http://localhost:3000/logout'
        - !Sub 'https://${ApplicationDomain}/logout'
      ClientName: NvaApplicationClient
      DefaultRedirectURI: 'http://localhost:3000'
      EnableTokenRevocation: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: LEGACY
      ReadAttributes:
        - custom:feideId
        - custom:nin
        - custom:feideIdNin
        - custom:feidememberrole
        - custom:orgFeideDomain
        - custom:firstName
        - custom:lastName
        - custom:accessRights
        - custom:customerId
        - custom:allowedCustomers
        - custom:roles
        - custom:nvaUsername
        - custom:cristinId
        - custom:topOrgCristinId
        - custom:personAffiliation
        - custom:impersonating
        - custom:impersonatedBy
        - custom:currentTerms
        - custom:acceptedTerms
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 9
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: hours
      SupportedIdentityProviders:
        - !Ref ConnectionToDataporten
      UserPoolId: !Ref UserPool
      WriteAttributes:
        - custom:feideId
        - custom:nin
        - custom:feidememberrole
        - custom:feideIdNin
        - custom:orgFeideDomain
        - custom:firstName
        - custom:lastName
        - custom:accessRights
        - custom:customerId
        - custom:allowedCustomers
        - custom:roles
        - custom:nvaUsername
        - custom:cristinId
        - custom:topOrgCristinId
        - custom:personAffiliation
        - custom:currentTerms
        - custom:acceptedTerms

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref AuthenticationDomainPrefix

  DLRApplicationClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - openid
        - email
        - phone
        - profile # it seems to be necessary for the custom attributes to appear
        - https://api.nva.unit.no/scopes/frontend
      CallbackURLs:
        - 'http://localhost:3000'
        - !Sub 'https://${ApplicationDomain}'
      LogoutURLs:
        - 'http://localhost:3000/logout'
        - !Sub 'https://${ApplicationDomain}/logout'
      ClientName: DLRApplicationClient
      DefaultRedirectURI: 'http://localhost:3000'
      EnableTokenRevocation: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: LEGACY
      ReadAttributes:
        - custom:feideId
        - custom:nin
        - custom:feideIdNin
        - custom:feidememberrole
        - custom:orgFeideDomain
        - custom:firstName
        - custom:lastName
        - custom:accessRights
        - custom:customerId
        - custom:allowedCustomers
        - custom:roles
        - custom:personAffiliation
        - custom:currentTerms
        - custom:acceptedTerms
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 2
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: hours
      SupportedIdentityProviders:
        - !Ref ConnectionToDataporten
      UserPoolId: !Ref UserPool
      WriteAttributes:
        - custom:feideId
        - custom:nin
        - custom:feidememberrole
        - custom:feideIdNin
        - custom:orgFeideDomain
        - custom:firstName
        - custom:lastName
        - custom:accessRights
        - custom:customerId
        - custom:allowedCustomers
        - custom:roles
        - custom:personAffiliation
        - custom:currentTerms
        - custom:acceptedTerms

  TestingApplicationClient:
    DependsOn: ResourceServerScopes
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - openid
        - email
        - phone
        - profile # it seems to be necessary for the custom attributes to appear
        - https://api.nva.unit.no/scopes/frontend
      CallbackURLs:
        - 'http://localhost:3000'
        - !Sub 'https://${ApplicationDomain}'
      LogoutURLs:
        - 'http://localhost:3000/logout'
        - !Sub 'https://${ApplicationDomain}/logout'
      ClientName: TestingClient3
      DefaultRedirectURI: 'http://localhost:3000'
      EnableTokenRevocation: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: LEGACY
      ReadAttributes:
        - custom:feideId
        - custom:nin
        - custom:feideIdNin
        - custom:feidememberrole
        - custom:orgFeideDomain
        - custom:firstName
        - custom:lastName
        - custom:accessRights
        - custom:customerId
        - custom:allowedCustomers
        - custom:roles
        - custom:nvaUsername
        - custom:cristinId
        - custom:topOrgCristinId
        - custom:personAffiliation
        - custom:currentTerms
        - custom:acceptedTerms
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 2
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: hours
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool
      WriteAttributes:
        - custom:feideId
        - custom:nin
        - custom:feidememberrole
        - custom:feideIdNin
        - custom:orgFeideDomain
        - custom:firstName
        - custom:lastName
        - custom:accessRights
        - custom:customerId
        - custom:allowedCustomers
        - custom:roles
        - custom:nvaUsername
        - custom:cristinId
        - custom:topOrgCristinId
        - custom:personAffiliation
        - custom:currentTerms
        - custom:acceptedTerms
  ## External API
  ExternalUserPoolName:
    Type: AWS::SSM::Parameter
    Properties:
      DataType: text
      Description: External userpool name
      Name: /NVA/ExternalUserPoolName
      Type: String
      Value: !Sub
        - "${UserPoolName}${AWS::AccountId}"
        - UserPoolName: !FindInMap [ 'Constants', 'Cognito','ExternalUserPoolNamePrefix' ]

  ExternalUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      UserPoolName: !GetAtt ExternalUserPoolName.Value

  ExternalUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref ExternalUserPool
      Domain: !Ref ExternalAuthenticationDomainPrefix

  PreTokenGenerationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-pre-token-generation-openid
      Handler: no.unit.nva.cognito.UserSelectionUponLoginHandler::handleRequest
      Role: !GetAtt CreateUsersRole.Arn
      Tracing: Active
      AutoPublishAlias: live
      DeploymentPreference:
        Enabled: true
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Environment:
        Variables:
          USERPOOL_NAME: !GetAtt UserPoolName.Value
          API_DOMAIN: !Ref ApiDomain
          COGNITO_CREDENTIALS_SECRET_NAME: BackendCognitoClientCredentials
          COGNITO_ID_KEY: backendClientId
          COGNITO_SECRET_KEY: backendClientSecret
          ID_NAMESPACE: !Sub 'https://${ApiDomain}/${CustomerDomainBasePath}'
          CUSTOMERS_TABLE_NAME: !Ref NvaCustomersTable
          USERS_AND_ROLES_TABLE: !Ref UserRoleMappings
          CRISTIN_API_URL: !Ref CristinApiUrl
      Timeout: 20

  PreTokenGenerationHandlerScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub function:${PreTokenGenerationHandler}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: PreTokenGenerationHandlerAliaslive

  PreTokenGenerationHandlerScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: PreTokenGenerationHandlerScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref PreTokenGenerationHandlerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  PreTokenGenerationHandlerTriggerPermission:
    DependsOn:
      - PreTokenGenerationHandlerScalingPolicy
      - PreTokenGenerationHandlerScalableTarget
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub '${PreTokenGenerationHandler.Arn}'
      Principal: cognito-idp.amazonaws.com

  PreTokenGenerationFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: Too many pre token generation requests failed
      AlarmDescription: If this alarm is triggered, then check cloudwatch logs for pre token generation lambda.
      AlarmActions:
        - !Ref SlackSnsArn
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref PreTokenGenerationHandler
      Period: 60
      EvaluationPeriods: 5
      DatapointsToAlarm: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: missing


### Outputs ############################################################################################################

Outputs:
  CognitoDomain:
    Description: Amazon Cognito Domain.
    Value: !Sub 'https://${AuthenticationDomainPrefix}.auth.${AWS::Region}.amazoncognito.com'
  CognitoURN:
    Description: Amazon Cognito URN.
    Value: !Sub 'urn:amazon:cognito:sp:${UserPool}'
  ExternalCognitoDomain:
    Description: External users Amazon Cognito Domain.
    Value: !Sub 'https://${ExternalAuthenticationDomainPrefix}.auth.${AWS::Region}.amazoncognito.com'
  ExternalCognitoURN:
    Description: External users Amazon Cognito URN.
    Value: !Sub 'urn:amazon:cognito:sp:${ExternalUserPool}'
