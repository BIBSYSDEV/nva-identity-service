openapi: 3.0.3
info:
  title: NVA Roles and Users catalogue
  description: Api for updating users and roles
  version: 1.0.0
paths:
  /login:
    post:
      summary: Selects Customer for User
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSelection'
      responses:
        '200':
          description: Successful login
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomerSelectionHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy
  /roles:
    post:
      summary: Adds new Role
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Successful creation of role. Returns the generated role
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/Role'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddRoleHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /roles/{role}:
    get:
      summary: Gets an existing Role
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - in: path
          name: role
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful fetching of role. Returns the requested role
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/Role'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoleHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy
  /userinfo:
    get:
      summary: Selects Customer for User
      security:
        - CognitoUserPool: [ "aws.cognito.signin.user.admin" ]
      responses:
        '200':
          description: Return OpenID user info for testing clients that do not have openid scope
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoUserInfoHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy
  /users:
    post:
      summary: Adds new user
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful creation of role. Returns the generated role
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/User'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{username}:
    get:
      summary: Gets an existing User
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful fetching of User. Returns the requested User
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/User'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
    put:
      summary: Updates an existing User
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '202':
          description: Successful request for updating the user. User will be eventually updated
          headers:
            Location:
              schema:
                type: string
              description: Relative path to the user URI
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /external-clients:
    post:
      summary: Adds new external client
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalClientRequest'
      responses:
        '200':
          description: Successful creation of external user. Returns the credentials for the generated user
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/ExternalClientWithCredentials'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Problem"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateExternalClientHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /external-clients/{clientId}:
    parameters:
      - in: path
        name: clientId
        schema:
          type: string
        required: true
    get:
      summary: Get a stored client and its associated customer
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      responses:
        '200':
          description: Returns the externalClient
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/ExternalClient'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "/components/schemas/Problem"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetExternalClientHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /institutions/users:
    get:
      summary: Lists users of specified
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - in: query
          name: institution
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of users belonging in the specified institute
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListByInstitutionHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
components:
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::GetAtt: UserPool.Arn
  schemas:
    AccessRight:
      type: string
      enum:
        - APPROVE_DOI_REQUEST
        - REJECT_DOI_REQUEST
    Role:
      properties:
        type:
          type: string
        rolename:
          type: string
        accessRight:
          type: array
          items:
            $ref: '#/components/schemas/AccessRight'
    User:
      properties:
        type:
          type: string
        username:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        institution:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        accessRight:
          type: array
          items:
            $ref: '#/components/schemas/AccessRight'
        viewingScope:
          $ref: '#/components/schemas/ViewingScope'
    ExternalClientRequest:
      properties:
        clientName:
          type: string
          description: Name of the OAuth client for the external client
        customerUri:
          type: string
          description: URI of the customer associated with the client
        cristinOrgUri:
          type: string
          description: URI of the cristin-organization associated with the client
        actingUser:
          type: string
          description: username to use when operations that leaves a trail of the user executing it is performed by the external client token
        scopes:
          type: array
          items:
              type: string
          description: Scopes that the client should have access to
    ExternalClient:
      properties:
        clientId:
          type: string
          description: Client ID used for authentication
        customerUri:
          type: string
          description: URI for the associated customer
        cristinOrgUri:
          type: string
          description: URI for the associated cristin-organization
        actingUser:
          type: string
          description: username to use when operations that leaves a trail of the user executing it is performed by the external client token
    ExternalClientWithCredentials:
      properties:
        clientId:
          type: string
          description: Client ID used for authentication
        clientSecret:
          type: string
          description: Client Secret used for authentication
        clientUrl:
          type: string
          description: URL for generating tokens
        customer:
          type: string
          description: URL for the associated customer
        scopes:
          type: array
          items:
            type: string
          description: Scopes that the client have access to
    ViewingScope:
      properties:
        includedUnits:
            type: array
            items:
              type: string
              format: uri
    CustomerSelection:
      properties:
        customerId:
          type: string
          format: uri
        type:
          type: string
          default: CustomerSelection
    Problem:
      type: object
      properties:
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
