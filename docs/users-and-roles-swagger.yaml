openapi: 3.0.3
info:
  title: NVA Roles and Users catalogue
  description: Api for updating users and roles
  version: 1.0.0
paths:
  /login:
    post:
      summary: Selects Customer for User
      operationId: setLoginCustomer
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/frontend" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSelection'
      responses:
        '200':
          description: Successful login
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomerSelectionHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy
  /roles/{role}:
    get:
      summary: Gets an existing Role
      operationId: getRole
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend" ]
      parameters:
        - in: path
          name: role
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful fetching of role. Returns the requested role
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/Role'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoleHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy
  /users:
    post:
      summary: Create user
      operationId: createUser
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: Ok, user already exists
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: Successful creation of user
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Conflict
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/Problem'
        '502':
          description: Bad gateway
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/Problem'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{username}:
    get:
      summary: Gets an existing User
      operationId: getUser
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend" ]
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful fetching of User. Returns the requested User
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/User'

      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
    put:
      summary: Updates an existing User
      operationId: updateUser
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend" ]
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '202':
          description: Successful request for updating the user. User will be eventually updated
          headers:
            Location:
              schema:
                type: string
              description: Relative path to the user URI
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/mine/accepted-terms:
    put:
      summary: Updates Terms and agreement for an existing User (person)
      operationId: updatePersonTermsConditionsHandler
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertTermsConditionsRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertTermsConditionsRequest'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                UnauthorizedExample:
                  $ref: '#/components/examples/UnauthorizedProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewatExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdatePersonTermsConditionsHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy
  /impersonation/stop:
    post:
      operationId: impersonationStop
      summary: Stops impersonating as another user. Used by admins for support.
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend"]
      responses:
        '200':
          description: Successful stoped impersonating user. Upon next login you will get your own claims.
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StopImpersonationHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /impersonation:
    post:
      summary: Impersonate as another user. Used by admins for support. Will generate login claims as if you were someone else.
      operationId: impersonationStart
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NationalIdentificationNumberBody'
      responses:
        '200':
          description: Successful impersonated as user. Upon next login you will get claims as if you were the impersonated person
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SetImpersonationHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /terms-and-conditions/current:
    get:
      summary: Access current terms & conditions
      operationId: getCurrentTermsConditionsHandler
      responses:
        '200':
          description: Returns the externalClient
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/TermsConditions'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"

      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCurrentTermsConditionsHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy

  /external-clients:
    get:
      summary: Access stored external client info by its token
      operationId: getExternalClientByToken
      security:
        - ExternalCognitoUserPool:
            - "https://api.nva.unit.no/scopes/third-party/file-upload"
            - "https://api.nva.unit.no/scopes/third-party/ticket-upsert"
            - "https://api.nva.unit.no/scopes/third-party/publication-read"
            - "https://api.nva.unit.no/scopes/third-party/ticket-read"
            - "https://api.nva.unit.no/scopes/third-party/reporting-read"
            - "https://api.nva.unit.no/scopes/third-party/publication-upsert"
      responses:
        '200':
          description: Returns the externalClient
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/ExternalClient'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetExternalClientUserinfoHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy
    post:
      summary: Adds new external client
      operationId: createExternalClient
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalClientRequest'
      responses:
        '200':
          description: Successful creation of external user. Returns the credentials for the generated user
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/ExternalClientWithCredentials'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateExternalClientHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /external-clients/{clientId}:
    parameters:
      - in: path
        name: clientId
        schema:
          type: string
        required: true
    get:
      summary: Get a stored client and its associated customer
      operationId: getExternalClient
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend" ]
      responses:
        '200':
          description: Returns the externalClient
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/ExternalClient'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Problem"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetExternalClientHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /institutions/users:
    get:
      summary: Lists users of specified
      operationId: listInstitutionUsers
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend" ]
      parameters:
        - name: institution
          description: UUID of institution
          in: query
          schema:
            type: string
          required: true
        - name: role
          description: Name of Role. Can be specified multiple times to find users with any of the specified roles
          in: query
          required: false
          schema:
            type: string
        - name: name
          description: User name
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of users belonging in the specified institute
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListByInstitutionHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
components:
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::GetAtt: UserPool.Arn
    ExternalCognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::GetAtt: ExternalUserPool.Arn
  schemas:
    AccessRight:
      type: string
      enum:
        - APPROVE_DOI_REQUEST
        - REJECT_DOI_REQUEST
    Role:
      properties:
        type:
          type: string
        rolename:
          type: string
        accessRight:
          type: array
          items:
            $ref: '#/components/schemas/AccessRight'
    User:
      type: object
      properties:
        username:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        institution:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        accessRight:
          type: array
          items:
            $ref: '#/components/schemas/AccessRight'
        viewingScope:
          $ref: '#/components/schemas/ViewingScope'
    UpsertTermsConditionsRequest:
      type: object
      required:
        - termsConditionsUri
      properties:
        termsConditionsUri:
          type: string
          description: URI to the terms and conditions
          format: uri
    CreateUserRequest:
      type: object
      required:
        - customerId
      properties:
        nationalIdentityNumber:
          type: string
        cristinIdentifier:
          type: string
        customerId:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        viewingScope:
          $ref: '#/components/schemas/ViewingScope'
    NationalIdentificationNumberBody:
      properties:
        nin:
          type: string
    ExternalClientRequest:
      properties:
        clientName:
          type: string
          description: Name of the OAuth client for the external client
        customerUri:
          type: string
          description: URI of the customer associated with the client
        cristinOrgUri:
          type: string
          description: URI of the cristin-organization associated with the client
        actingUser:
          type: string
          description: username to use when operations that leaves a trail of the user executing it is performed by the external client token
        scopes:
          type: array
          items:
              type: string
          description: Scopes that the client should have access to
    ExternalClient:
      properties:
        clientId:
          type: string
          description: Client ID used for authentication
        customerUri:
          type: string
          description: URI for the associated customer
        cristinOrgUri:
          type: string
          description: URI for the associated cristin-organization
        actingUser:
          type: string
          description: username to use when operations that leaves a trail of the user executing it is performed by the external client token
    ExternalClientWithCredentials:
      properties:
        clientId:
          type: string
          description: Client ID used for authentication
        clientSecret:
          type: string
          description: Client Secret used for authentication
        clientUrl:
          type: string
          description: URL for generating tokens
        customer:
          type: string
          description: URL for the associated customer
        scopes:
          type: array
          items:
            type: string
          description: Scopes that the client have access to
    ViewingScope:
      properties:
        includedUnits:
            type: array
            items:
              type: string
              format: uri
    CustomerSelection:
      properties:
        customerId:
          type: string
          format: uri
        type:
          type: string
          default: CustomerSelection
    TermsConditions:
      type: object
      description: NVA license agreement
      required:
        - termsConditionsUri
      properties:
        termsConditionsUri:
          type: string
          description: URI to the terms and conditions
          format: uri
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
  examples:
    BadRequestProblemExample:
      value:
        type: about:blank
        status: 400
        title: Bad Request
        detail: 'Identifier is not a valid UUID: HelloWorld!'
        instance: /path/to/resource
    UnauthorizedProblemExample:
      value:
        type: about:blank
        status: 401
        title: Unauthorized
        detail: 'User is not authorized to perform this action'
        instance: /path/to/resource
    NotFoundProblemExample:
      value:
        type: about:blank
        status: 404
        title: Not Found
        detail: 'The requested resource was not found'
        instance: /path/to/resource
    BadGatewayProblemExample:
      value:
        type: about:blank
        status: 502
        title: Bad Gateway
        detail: 'Persistence service is unavailable'
        instance: /path/to/resource