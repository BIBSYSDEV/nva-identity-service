AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Stack for Cognito and users, roles and customer institution services.

#
#  After Cognito has been created it must be registered with Feide
#  The user pools service provider URN is: urn:amazon:cognito:sp:<user_pool_id>
#
#  Information needed is:
#
#    Amazon Cognito Domain:  https://nva-test.auth.eu-west-1.amazoncognito.com
#    Amazon Cognito URN:     urn:amazon:cognito:sp:eu-west-1_JRPabH2jf
#

Parameters:
  # Parameters from Cognito
  AuthenticationDomainPrefix:
    Type: String
    Default: nva-develop
    Description: The prefix for the Cognito domain that hosts the sign-up and sign-in pages for your application.
  FeideMetadataUrl:
    Type: String
    Default: https://idp-test.feide.no/simplesaml/saml2/idp/metadata.php
    Description: Link to the the identity provider details.
  FrontendApplicationUrl:
    Type: String
    Default: https://frontend.dev.nva.aws.unit.no
    Description: A base URL for the callbacks for the identity providers.
  ParameterNamePrefix:
    Type: String
    Description: Prefix used for naming parameters.
    Default: ''

  # Parameters from nva-cognito-pre-token-generation-trigger
  CustomDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Custom API to connect this lambda to
    Default: CustomDomain
  UserServiceSecretName:
    Type: String
    Description: Name of the Secret for Users and Role Service
    Default: UserCatalogueApiKey
  UserServiceSecretKey:
    Type: String
    Description: Key in the Secret for Users and Role Service
    Default: ApiKey
  MaxConcurrency:
    Type: String
    Description: Maximum capacity for provisioned concurrency
    Default: 10
  MinConcurrency:
    Type: String
    Description: Minimum capacity for provisioned concurrency
    Default: 1

  # Parameters from nva-user-access-service
  UsersAndRolesTableName:
    Type: String
    Default: UsersAndRolesTable
  InternalApiBasePath:
    Type: String
    Default: users-roles-internal
  ExternalApiBasePath:
    Type: String
    Default: users-roles

  # Parameter from nva-customer-api
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: customer
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Globals:
  Function:
    MemorySize: 512
    Timeout: 10
    Runtime: java11
    Tracing: Active
  Api:
    Cors:
      AllowMethods: '''POST, PUT, GET,OPTIONS'''
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowOrigin: '''*'''

Resources:

  ### Cognito ##########################################################################################################

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes: [email]
      EmailConfiguration:
        EmailSendingAccount: 'COGNITO_DEFAULT'
      MfaConfiguration: 'OFF'
      LambdaConfig:
        PreTokenGeneration: !Sub
          - ${TriggerFunctionArn}:live
          - TriggerFunctionArn: !GetAtt TriggerFunction.Arn
      Schema:
        - Name: affiliation
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: application
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: applicationRoles
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: commonName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feideTargetedId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: feideId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: identifiers
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgEmail
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgLegalName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgName
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: orgNumber
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: schoolList
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: yearOfBirth
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: customerId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: cristinId
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: accessRights
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: hostedOrgNumber
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: hostedAffiliation
          AttributeDataType: String
          Mutable: true
          Required: false

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Ref AuthenticationDomainPrefix

  UserPoolIdentityProviderFeide:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      AttributeMapping:
        custom:affiliation: eduPersonAffiliation
        custom:commonName: cn
        custom:feideId: eduPersonPrincipalName
        custom:feideTargetedId: eduPersonTargetedID
        custom:orgLegalName: eduPersonOrgDN:eduOrgLegalName
        name: displayName
        custom:orgEmail: eduPersonOrgDN:mail
        custom:orgName: eduPersonOrgDN:o
        custom:orgNumber: eduPersonOrgDN:norEduOrgNIN
        custom:schoolList: feideSchoolList
        custom:yearOfBirth: feideYearOfBirth
        given_name: givenName
        email: mail
        family_name: sn
        custom:hostedOrgNumber: eduPersonOrgUnitDN:norEduOrgUnitUniqueIdentifier
        custom:hostedAffiliation: eduPersonScopedAffiliation
      UserPoolId: !Ref UserPool
      ProviderName: FeideIdentityProvider
      ProviderType: SAML
      ProviderDetails:
        MetadataURL: !Ref FeideMetadataUrl

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: false
      SupportedIdentityProviders:
        - !Ref UserPoolIdentityProviderFeide
      UserPoolId: !Ref UserPool
      CallbackURLs:
        - !Ref FrontendApplicationUrl
      LogoutURLs:
        - !Sub '${FrontendApplicationUrl}/logout'
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - aws.cognito.signin.user.admin

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: True
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Sub 'cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'

  # IAM role used for authenticated users
  FeideAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: 'CognitoAuthorizedPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: ['*']

  # IAM role used for unauthenticated users
  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: 'CognitoUnauthenticatedRolePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: ['*']

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt FeideAuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  # IAM role used for users allowed to publish
  PublisherRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: 'cognito-identity.amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud':
                  Ref: IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: PublisherPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: ['*']

  FeideAuthenticatedGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: FeideAuthenticatedGroup
      Description: Common users authenticated with Feide
      RoleArn: !GetAtt FeideAuthenticatedRole.Arn
      UserPoolId: !Ref UserPool

  PublisherGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: PublisherGroup
      Description: Users allowed to publish
      RoleArn: !GetAtt PublisherRole.Arn
      UserPoolId: !Ref UserPool

  ### Cognito Trigger ##################################################################################################

  TriggerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
        - PolicyName: AddUserToGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: !Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*'
        - PolicyName: GetSecretValue
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref UserServiceSecret

  InvokeTriggerPermission:
    DependsOn:
      - TriggerFunctionAliaslive
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TriggerFunction
      Principal: cognito-idp.amazonaws.com

  InvokeTriggerLivePermission:
    DependsOn:
      - TriggerFunctionAliaslive
      - TriggerFunction
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub '${TriggerFunction}:live'
      Principal: cognito-idp.amazonaws.com

  TriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-pre-token-generation
      Handler: no.unit.nva.cognito.TriggerHandler::handleRequest
      Runtime: java11
      Role: !GetAtt TriggerExecutionRole.Arn
      MemorySize: 1408
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Timeout: 10
      Environment:
        Variables:
          #TODO: Can be removed when trigger is invoking functions directly
          CUSTOMER_API_SCHEME: https
          CUSTOMER_API_HOST: !Sub 'api.${CustomDomain}'
          USER_API_SCHEME: https
          USER_API_HOST: !Sub 'api.${CustomDomain}'
          USER_SERVICE_SECRET_NAME: !Sub '${ParameterNamePrefix}${UserServiceSecretName}'
          USER_SERVICE_SECRET_KEY: !Ref UserServiceSecretKey

  TriggerScalableTarget:
    DependsOn:
      - TriggerFunctionAliaslive
      - TriggerFunction
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub 'function:${TriggerFunction}:live'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency'
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda

  TriggerScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TriggerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  UserServiceSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret that will be used by users and roles service
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: !Ref UserServiceSecretKey
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Name: !Sub '${ParameterNamePrefix}${UserServiceSecretName}'

  ### User Access Service ##############################################################################################

  UserRoleMappings:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Ref UsersAndRolesTableName
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: PrimaryKeyHashKey
          AttributeType: S
        - AttributeName: PrimaryKeyRangeKey
          AttributeType: S
        - AttributeName: SecondaryIndex1HashKey
          AttributeType: S
        - AttributeName: SecondaryIndex1RangeKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: PrimaryKeyHashKey
          KeyType: HASH
        - AttributeName: PrimaryKeyRangeKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: SearchUsersByInstitution
          KeySchema:
            - AttributeName: SecondaryIndex1HashKey
              KeyType: HASH
            - AttributeName: SecondaryIndex1RangeKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.authorizer.LambdaAuthorizer::handleRequest
      MemorySize: 1408
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Layers:
        - !Ref UserAccessCommonsLayer
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
          API_SECRET_NAME: !Sub '${ParameterNamePrefix}${UserServiceSecretName}'
          API_SECRET_KEY: !Ref UserServiceSecretKey
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Resource: !Ref UserServiceSecret
              Action:
                - "secretsmanager:GetResourcePolicy"
                - "secretsmanager:GetSecretValue"
                - "secretsmanager:DescribeSecret"
                - "secretsmanager:ListSecretVersionIds"
  InternalApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Auth:
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !Join [ "",[ !GetAtt LambdaAuthorizer.Arn,":","live" ] ]
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 1
        DefaultAuthorizer: LambdaRequestAuthorizer
      OpenApiVersion: 3.0.1
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: NVA Users internal endpoint
          description: Api for updating users and roles
          version: 1.0.0
        paths:
          /service/users:
            post:
              summary: Adds new user
              security:
                - ApiKey: [ ]
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              responses:
                '200':
                  description: Successful creation of role. Returns the generated role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceAddUserHandler.Arn}:live/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
          /service/users/{username}:
            get:
              summary: Get user (service use only)
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              security:
                - ApiKey: [ ]
              responses:
                '200':
                  description: Returns the user.
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceGetUserHandler.Arn}:live/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
            put:
              summary: Updates an existing User
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              security:
                - ApiKey: [ ]
              responses:
                '202':
                  description: Successful request for updating the user. User will be eventually updated
                  headers:
                    Location:
                      schema:
                        type: string
                      description: Relative path to the user URI
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServiceUpdateUserHandler.Arn}:live/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
        components:
          schemas:
            AccessRight:
              type: string
              enum:
                - APPROVE_DOI_REQUEST
                - REJECT_DOI_REQUEST
            Role:
              properties:
                type:
                  type: string
                rolename:
                  type: string
                accessRight:
                  type: array
                  items:
                    $ref: '#/components/schemas/AccessRight'
            User:
              properties:
                type:
                  type: string
                username:
                  type: string
                givenName:
                  type: string
                familyName:
                  type: string
                institution:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/Role'
                accessRight:
                  type: array
                  items:
                    $ref: '#/components/schemas/AccessRight'
          securitySchemes:
            ApiKey:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                type: request
                authorizerResultTtlInSeconds: 1
                identitySource: method.request.header.Authorization
                authorizerUri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthorizer.Arn}:live/invocations

  ExternalApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: NVA Roles and Users catalogue
          description: Api for updating users and roles
          version: 1.0.0
        paths:
          /roles:
            post:
              summary: Adds new Role
              security:
                - CognitoUserPool: [ ]
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/Role'
              responses:
                '200':
                  description: Successful creation of role. Returns the generated role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/Role'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddRoleHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
          /roles/{role}:
            get:
              summary: Gets an existing Role
              parameters:
                - in: path
                  name: role
                  schema:
                    type: string
                  required: true
              security:
                - CognitoUserPool: [ ]
              responses:
                '200':
                  description: Successful fetching of role. Returns the requested role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/Role'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoleHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
          /users:
            post:
              summary: Adds new user
              security:
                - CognitoUserPool: [ ]
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              responses:
                '200':
                  description: Successful creation of role. Returns the generated role
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddUserHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
          /users/{username}:
            get:
              summary: Gets an existing User
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              security:
                - CognitoUserPool: [ ]
              responses:
                '200':
                  description: Successful fetching of User. Returns the requested User
                  content:
                    "application/json":
                      schema:
                        $ref: '#/components/schemas/User'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
            put:
              summary: Updates an existing User
              parameters:
                - in: path
                  name: username
                  schema:
                    type: string
                  required: true
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'
              security:
                - CognitoUserPool: [ ]
              responses:
                '202':
                  description: Successful request for updating the user. User will be eventually updated
                  headers:
                    Location:
                      schema:
                        type: string
                      description: Relative path to the user URI
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUserHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
          /institutions/users:
            get:
              summary: Lists users of specified institution
              parameters:
                - in: query
                  name: institution
                  schema:
                    type: string
                  required: true
              responses:
                '200':
                  description: List of users belonging in the specified institue
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
              security:
                - CognitoUserPool: [ ]
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListByInstitutionHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: aws_proxy
        components:
          schemas:
            AccessRight:
              type: string
              enum:
                - APPROVE_DOI_REQUEST
                - REJECT_DOI_REQUEST
            Role:
              properties:
                type:
                  type: string
                rolename:
                  type: string
                accessRight:
                  type: array
                  items:
                    $ref: '#/components/schemas/AccessRight'
            User:
              properties:
                type:
                  type: string
                username:
                  type: string
                givenName:
                  type: string
                familyName:
                  type: string
                institution:
                  type: string
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/Role'
                accessRight:
                  type: array
                  items:
                    $ref: '#/components/schemas/AccessRight'
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !GetAtt UserPool.Arn
            ApiKey:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                type: request
                authorizerUri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaAuthorizer.Arn}/invocations
                identitySource: method.request.header.Authorization

  UserAccessCommonsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: user-access-service-layer
      Description: User Access Service
      ContentUri: user-access-service/build/distributions/user-access-service.zip
      CompatibleRuntimes:
        - java11
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

  AddRoleHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.AddRoleHandler::handleRequest
      Layers:
        - !Ref UserAccessCommonsLayer
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /roles
            Method: post
            RestApiId: !Ref ExternalApi

  GetRoleHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.GetRoleHandler::handleRequest
      Layers:
        - !Ref UserAccessCommonsLayer
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /roles/{role}
            Method: get
            RestApiId: !Ref ExternalApi
  AddUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.AddUserHandler::handleRequest
      Layers:
        - !Ref UserAccessCommonsLayer
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users
            Method: post
            RestApiId: !Ref ExternalApi

  GetUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.GetUserHandler::handleRequest
      Layers:
        - !Ref UserAccessCommonsLayer
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: get
            RestApiId: !Ref ExternalApi
  UpdateUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.UpdateUserHandler::handleRequest
      Layers:
        - !Ref UserAccessCommonsLayer
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users/{username}
            Method: put
            RestApiId: !Ref ExternalApi
  ListByInstitutionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.ListByInstitutionHandler::handleRequest
      Layers:
        - !Ref UserAccessCommonsLayer
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /institutions/users
            Method: get
            RequestParameters:
              - method.request.querystring.institution:
                  Required: true
            RestApiId: !Ref ExternalApi
  ServiceGetUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.GetUserHandler::handleRequest
      MemorySize: 1408
      Layers:
        - !Ref UserAccessCommonsLayer
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /service/users/{username}
            Method: get
            RestApiId: !Ref InternalApi
  ServiceUpdateUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.UpdateUserHandler::handleRequest
      MemorySize: 1408
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Layers:
        - !Ref UserAccessCommonsLayer
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /service/users/{username}
            Method: put
            RestApiId: !Ref InternalApi
  ServiceAddUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user-access-handlers
      Handler: no.unit.nva.handlers.AddUserHandler::handleRequest
      Layers:
        - !Ref UserAccessCommonsLayer
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          USERS_AND_ROLES_TABLE: !Ref UsersAndRolesTableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersAndRolesTableName
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /service/users
            Method: post
            RestApiId: !Ref InternalApi

  LambdaAuthorizerScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${LambdaAuthorizer}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: LambdaAuthorizerAliaslive
  LambdaAuthorizerScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref LambdaAuthorizerScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.8
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  ServiceUpdateUserScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${ServiceUpdateUserHandler}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: ServiceUpdateUserHandlerAliaslive
  ServiceUpdateUserScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceUpdateUserScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.8
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  ServiceGetUserScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${ServiceGetUserHandler}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: ServiceGetUserHandlerAliaslive
  ServiceGetUserScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceGetUserScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.8
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  ServiceAddUserScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${ServiceAddUserHandler}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: ServiceAddUserHandlerAliaslive
  ServiceAddUserScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceAddUserScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.8
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  InternalApiStaticUrl:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref InternalApiBasePath
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref InternalApi
      Stage: !Ref  InternalApi.Stage
  ExternalApiStaticUrl:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref ExternalApiBasePath
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref ExternalApi
      Stage: !Ref ExternalApi.Stage

  ### Customer Service #################################################################################################

  NvaCustomersTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete # DeletionPolicy should be added on main branch stacks through use of stack policy
    Properties:
      TableName: !Sub nva-customers-${AWS::StackName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: identifier
          AttributeType: S
        - AttributeName: feideOrganizationId
          AttributeType: S
        - AttributeName: cristinId
          AttributeType: S
      KeySchema:
        - AttributeName: identifier
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: byOrgNumber
          KeySchema:
            - AttributeName: feideOrganizationId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: byCristinId
          KeySchema:
            - AttributeName: cristinId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
  NvaCustomerApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        swagger: '2.0'
        info:
          title: NVA Customer API
          version: '1.0'
        paths:
          /:
            post:
              summary: Create Customer
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: body
                  name: customer
                  description: The Customer to create.
                  schema:
                    $ref: '#/definitions/Customer'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateCustomerFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '201':
                  description: Created
                  schema:
                    $ref: '#/definitions/Customer'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
            get:
              summary: Get All Customers
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetAllCustomersFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    type: list
                    items:
                      $ref: '#/definitions/Customer'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '404':
                  description: Not Found
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
          /{identifier}:
            get:
              summary: Get Customer
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Customer to get.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetCustomerFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Customer'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '404':
                  description: Not Found
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
            put:
              summary: Update Customer
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: path
                  name: identifier
                  type: string
                  format: uuid
                  required: true
                  description: UUID identifier of the Customer to update.
                - in: body
                  name: customer
                  description: The Customer to update.
                  schema:
                    $ref: '#/definitions/Customer'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdateCustomerFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Customer'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
          /orgNumber/{orgNumber}:
            get:
              summary: Get CustomerIdentifiers by orgNumber
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: path
                  name: orgNumber
                  type: string
                  required: true
                  description: OrgNumber of the CustomerIdentifiers to get.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetCustomerByOrgNumberFunction.Arn}:live/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/CustomerIdentifiers'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '404':
                  description: Not Found
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
          /cristinId/{cristinId}:
            get:
              summary: Get Customer by cristinId
              consumes:
                - application/json
              produces:
                - application/json
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: path
                  name: cristinId
                  type: string
                  required: true
                  description: CristinId of the Customer to get.
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetCustomerByCristinIdFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Customer'
                '400':
                  description: Bad Request
                  schema:
                    $ref: '#/definitions/Problem'
                '404':
                  description: Not Found
                  schema:
                    $ref: '#/definitions/Problem'
                '502':
                  description: Bad Gateway
                  schema:
                    $ref: '#/definitions/Problem'
        definitions:
          CustomerIdentifiers:
            type: object
            properties:
              identifier:
                type: string
                format: uri
              cristinId:
                type: string
                format: uri
          Customer:
            type: object
            properties:
              id:
                type: string
                format: uri
              identifier:
                type: string
                format: uuid
              type:
                type: string
              createdDate:
                type: string
                format: date-time
              modifiedDate:
                type: string
                format: date-time
              name:
                type: string
              displayName:
                type: string
              shortName:
                type: string
              archiveName:
                type: string
              cname:
                type: string
              institutionDns:
                type: string
              feideOrganizationId:
                type: string
              cristinId:
                type: string
                format: uri
              '@context':
                type: object
          Problem:
            type: object
            properties:
              title:
                type: string
              status:
                type: integer
              detail:
                type: string
        securityDefinitions:
          CognitoUserPool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !GetAtt UserPool.Arn
  NvaCreateCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-customer
      Handler: no.unit.nva.customer.create.CreateCustomerHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaCustomersTable
          BY_ORG_NUMBER_INDEX_NAME: byOrgNumber
          BY_CRISTIN_ID_INDEX_NAME: byCristinId
          ID_NAMESPACE: !Sub
            - "https://${Domain}/${Path}"
            - Domain: !Ref CustomDomain
              Path: !Ref CustomDomainBasePath
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaCustomerApi
  NvaGetCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-customer
      Handler: no.unit.nva.customer.get.GetCustomerHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaCustomersTable
          BY_ORG_NUMBER_INDEX_NAME: byOrgNumber
          BY_CRISTIN_ID_INDEX_NAME: byCristinId
          ID_NAMESPACE: !Sub
            - "https://${Domain}/${Path}"
            - Domain: !Ref CustomDomain
              Path: !Ref CustomDomainBasePath
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetCustomerEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: get
            RestApiId: !Ref NvaCustomerApi
  NvaGetCustomerByOrgNumberFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-customer-by-org-number
      Handler: no.unit.nva.customer.get.GetCustomerByOrgNumberHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaCustomersTable
          BY_ORG_NUMBER_INDEX_NAME: byOrgNumber
          BY_CRISTIN_ID_INDEX_NAME: byCristinId
          ID_NAMESPACE: !Sub
            - "https://${Domain}/${Path}"
            - Domain: !Ref CustomDomain
              Path: !Ref CustomDomainBasePath
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetByOrgNumberEvent:
          Type: Api
          Properties:
            Path: /orgNumber/{orgNumber}
            Method: get
            RestApiId: !Ref NvaCustomerApi
  NvaGetCustomerByCristinIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-customer-by-cristin-id
      Handler: no.unit.nva.customer.get.GetCustomerByCristinIdHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaCustomersTable
          BY_ORG_NUMBER_INDEX_NAME: byOrgNumber
          BY_CRISTIN_ID_INDEX_NAME: byCristinId
          ID_NAMESPACE: !Sub
            - "https://${Domain}/${Path}"
            - Domain: !Ref CustomDomain
              Path: !Ref CustomDomainBasePath
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetByCristinIdEvent:
          Type: Api
          Properties:
            Path: /cristinId/{cristinId}
            Method: get
            RestApiId: !Ref NvaCustomerApi
  NvaGetAllCustomersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-all-customers
      Handler: no.unit.nva.customer.getall.GetAllCustomersHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaCustomersTable
          BY_ORG_NUMBER_INDEX_NAME: byOrgNumber
          BY_CRISTIN_ID_INDEX_NAME: byCristinId
          ID_NAMESPACE: !Sub
            - "https://${Domain}/${Path}"
            - Domain: !Ref CustomDomain
              Path: !Ref CustomDomainBasePath
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref NvaCustomerApi
  NvaUpdateCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update-customer
      Handler: no.unit.nva.customer.update.UpdateCustomerHandler::handleRequest
      Runtime: java11
      MemorySize: 1408
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref NvaCustomersTable
          BY_ORG_NUMBER_INDEX_NAME: byOrgNumber
          BY_CRISTIN_ID_INDEX_NAME: byCristinId
          ID_NAMESPACE: !Sub
            - "https://${Domain}/${Path}"
            - Domain: !Ref CustomDomain
              Path: !Ref CustomDomainBasePath
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NvaCustomersTable
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /{identifier}
            Method: put
            RestApiId: !Ref NvaCustomerApi

  NvaGetCustomerByOrgNumberScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${NvaGetCustomerByOrgNumberFunction}:live
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: NvaGetCustomerByOrgNumberFunctionAliaslive

  NvaGetCustomerByOrgNumberScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: utilization
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref NvaGetCustomerByOrgNumberScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  NvaCustomerBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Sub api.${CustomDomain}
      RestApiId: !Ref NvaCustomerApi
      Stage: !Ref NvaCustomerApi.Stage

  ### Parameters #######################################################################################################

  CognitoAuthenticationDomainPrefixParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoAuthenticationDomainPrefix'
      Description: The prefix for the Cognito domain that hosts the sign-up and sign-in pages for your application.
      Type: String
      Value: !Ref AuthenticationDomainPrefix

  CognitoFrontendApplicationUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoFrontendApplicationUrl'
      Description: A base URL for the callbacks for the identity providers.
      Type: String
      Value: !Ref FrontendApplicationUrl

  FeideMetadataUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}FeideMetadataUrl'
      Description: Link to the the identity provider details.
      Type: String
      Value: !Ref FeideMetadataUrl

  CognitoAuthorizerArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoAuthorizerArn'
      Description: ARN Identifier of the UserPool
      Type: String
      Value: !GetAtt UserPool.Arn

  CognitoIdentityPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoIdentityPoolId'
      Description: Identifier of the IdentityPool assosiated with the UserPool
      Type: String
      Value: !Ref IdentityPool

  CognitoUserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Value: !Ref UserPool
      Description: Identifier of the UserPool in Cognito
      Name: !Sub '${ParameterNamePrefix}CognitoUserPoolId'
      Type: String

  CognitoUserPoolAppClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoUserPoolAppClientId'
      Description: Identifier to use for the app clients to access this user pool
      Type: String
      Value: !Ref UserPoolClient

  CognitoURNParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${ParameterNamePrefix}CognitoURN'
      Description: URN of the cognito login to use in Feide
      Type: String
      Value: !Sub 'urn:amazon:cognito:sp:${UserPool}'

### Outputs ############################################################################################################

Outputs:
  CognitoDomain:
    Description: Amazon Cognito Domain.
    Value: !Sub 'https://${AuthenticationDomainPrefix}.auth.${AWS::Region}.amazoncognito.com'
  CognitoURN:
    Description: Amazon Cognito URN.
    Value: !Sub 'urn:amazon:cognito:sp:${UserPool}'