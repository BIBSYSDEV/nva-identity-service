openapi: 3.0.3
info:
  title: NVA Roles and Users catalogue
  description: Api for updating users and roles
  version: 1.0.0
paths:
  /login:
    post:
      summary: Selects Customer for User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerSelection'
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/frontend"]
      responses:
        '200':
          description: Successful login
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomerSelectionHandler.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: aws_proxy
  /roles:
    post:
      summary: Adds new Role
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/backend"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Successful creation of role. Returns the generated role
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/Role'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddRoleHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /roles/{role}:
    get:
      summary: Gets an existing Role
      parameters:
        - in: path
          name: role
          schema:
            type: string
          required: true
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend"]
      responses:
        '200':
          description: Successful fetching of role. Returns the requested role
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/Role'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoleHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users:
    post:
      summary: Adds new user
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/backend"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful creation of role. Returns the generated role
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/User'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /users/{username}:
    get:
      summary: Gets an existing User
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend"]
      responses:
        '200':
          description: Successful fetching of User. Returns the requested User
          content:
            "application/json":
              schema:
                $ref: '#/components/schemas/User'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
    put:
      summary: Updates an existing User
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend"]
      responses:
        '202':
          description: Successful request for updating the user. User will be eventually updated
          headers:
            Location:
              schema:
                type: string
              description: Relative path to the user URI
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUserHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
  /institutions/users:
    get:
      summary: Lists users of specified institution
      parameters:
        - in: query
          name: institution
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of users belonging in the specified institue
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - CognitoUserPool: ["https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend"]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListByInstitutionHandler.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: aws_proxy
components:
  schemas:
    AccessRight:
      type: string
      enum:
        - APPROVE_DOI_REQUEST
        - REJECT_DOI_REQUEST
    Role:
      properties:
        type:
          type: string
        rolename:
          type: string
        accessRight:
          type: array
          items:
            $ref: '#/components/schemas/AccessRight'
    User:
      properties:
        type:
          type: string
        username:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        institution:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        accessRight:
          type: array
          items:
            $ref: '#/components/schemas/AccessRight'
        viewingScope:
          $ref: '#/components/schemas/ViewingScope'
    ViewingScope:
      properties:
        includedUnits:
            type: array
            items:
              type: string
              format: uri
    CustomerSelection:
      properties:
        customerId:
          type: string
          format: uri
        type:
          type: string
          default: CustomerSelection
  securitySchemes:
    CognitoUserPool:
      type: http
      scheme: bearer
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::GetAtt: UserPool.Arn
