/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Apply the java Plugin to add support for Java.
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    //id "nebula.lint"
    id 'maven-publish'
    id 'base'
}



repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation libs.nva.core
    implementation libs.bundles.aws.xray
    testImplementation(libs.bundles.testing) {
        exclude group: 'org.hamcrest', module : 'hamcrest-core'
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    failFast = true
    testLogging {
        events('skipped', 'passed', 'failed')
    }
    finalizedBy jacocoTestReport
}

test {
    environment "ID_NAMESPACE", "https://www.example.org"
    environment "ALLOWED_ORIGIN", "*"
}

pmd {
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/ruleset.xml')
    toolVersion = "6.33.0"
    ruleSets = []
    ignoreFailures = false
}

checkstyle {
    configFile = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml').asFile()
    showViolations = true
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet rootProject.resources.text.fromFile('config/checkstyle/checkstyle-simple.xsl')
    }
}

// jacoco configuration
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn(jacocoTestReport)

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
        rule {
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.000
            }
        }
    }
}

// publish submodules
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

def getProjectList() {
    // These projects are considered. Replace with a different list as needed.
    subprojects + project
}

task jacocoMerge(type: JacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Merge the JaCoCo data files from all subprojects into one'
    project.afterEvaluate {
        // do it at the end of the config phase to be sure all information is present
        FileCollection execFiles = project.objects.fileCollection()   // an empty FileCollection
        getProjectList().each { Project subproject ->
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                def testTasks = subproject.tasks.withType(Test)
                dependsOn(testTasks)   // ensure that .exec files are actually present

                testTasks.each { Test task ->
                    // The JacocoTaskExtension is the source of truth for the location of the .exec file.
                    JacocoTaskExtension extension = task.getExtensions().findByType(JacocoTaskExtension.class)
                    if (extension != null) {
                        execFiles.from extension.getDestinationFile()
                    }
                }
            }
        }
        executionData = execFiles
    }
    doFirst {
        // .exec files might be missing if a project has no tests. Filter in execution phase.
        executionData = executionData.filter { it.canRead() }
    }
}

def getReportTasks(JacocoReport pRootTask) {
    getProjectList().collect {
        it.tasks.withType(JacocoReport).findAll { it != pRootTask }
    }.flatten()
}

task jacocoRootReport(type: JacocoReport, dependsOn: tasks.jacocoMerge) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Generates an aggregate report from all subprojects'

    logger.lifecycle 'Using aggregated file: ' + tasks.jacocoMerge.destinationFile
    executionData.from tasks.jacocoMerge.destinationFile

    project.afterEvaluate {
        // The JacocoReport tasks are the source of truth for class files and sources.
        def reportTasks = getReportTasks(tasks.jacocoRootReport)
        classDirectories.from project.files({
            reportTasks.collect { it.classDirectories }.findAll { it != null }
        })
        sourceDirectories.from project.files({
            reportTasks.collect { it.sourceDirectories }.findAll { it != null }
        })
    }

    reports {
        xml.enabled true
    }
}

build {
    dependsOn jacocoRootReport
}