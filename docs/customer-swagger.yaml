openapi: '3.0.3'
info:
  title: NVA Customer API
  version: '1.0'
  description: >
    The customer data API for NVA returns data about NVA participant institutions. The API has restricted access although no sensitive data is contained within.
  termsOfService: 'http://nva.unit.no/terms/'
  contact:
    email: 'nva@unit.no'
  license:
    name: MIT/NVA data
    url: https://link.to.license
externalDocs:
  description: Find out more about NVA
  url: 'https://nva.unit.no'
servers:
  - url: 'https://api.nva.unit.no/customers'
    description: production
  - url: 'https://api.test.unit.no/customers'
    description: test
  - url: 'https://api.dev.unit.no/customers'
    description: develop
paths:
  /:
    post:
      summary: Create Customer
      operationId: createCustomer
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              objectExample:
                $ref: '#/components/examples/CustomerExample'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              objectExample:
                $ref: '#/components/examples/CustomerExample'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateCustomerFunction.Arn}/invocations
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                objectExample:
                  $ref: '#/components/examples/CustomerExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                objectExample:
                  $ref: '#/components/examples/CustomerExample'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewatExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
    get:
      summary: Get All Customers
      operationId: listCustomers
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaListAllCustomersFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerList'
              examples:
                objectExample:
                  $ref: '#/components/examples/CustomerListExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerList'
              examples:
                objectExample:
                  $ref: '#/components/examples/CustomerListExample'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                NotFoundExample:
                  $ref: '#/components/examples/NotFoundProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewatExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
  /{identifier}:
    get:
      summary: Get Customer
      operationId: getCustomer
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: identifier
          description: UUID identifier of the Customer to get.
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CustomerIdentifier'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetCustomerFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                objectExample:
                  $ref: '#/components/examples/CustomerExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                objectExample:
                  $ref: '#/components/examples/CustomerExample'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                NotFoundExample:
                  $ref: '#/components/examples/NotFoundProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewayExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
    put:
      summary: Update Customer
      operationId: updateCustomer
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: identifier
          description: UUID identifier of the Customer to update
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CustomerIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              CustomerExample:
                $ref: '#/components/examples/CustomerExample'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              CustomerExample:
                $ref: '#/components/examples/CustomerExample'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdateCustomerFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                CustomerExample:
                  $ref: '#/components/examples/CustomerExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                CustomerExample:
                  $ref: '#/components/examples/CustomerExample'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewatExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
  /{identifier}/doiagent:
    get:
      summary: Get Customer doi agent with secret
      operationId: getDoiAgent
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: identifier
          description: UUID identifier of the Customer
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CustomerIdentifier'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoiAgent'
              examples:
                VocabularyListExample:
                  $ref: '#/components/examples/DoiAgentExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DoiAgent'
              examples:
                VocabularyListExample:
                  $ref: '#/components/examples/DoiAgentExample'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetCustomerDoiAgentFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    put:
      summary: Update Customer doi agent with secret
      operationId: updateCustomerDoiAgent
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: identifier
          description: UUID identifier of the Customer to update
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CustomerIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoiAgent'
            examples:
              CustomerExample:
                $ref: '#/components/examples/DoiAgentExample'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdateCustomerDoiAgentFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoiAgent'
              examples:
                CustomerExample:
                  $ref: '#/components/examples/DoiAgentExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DoiAgent'
              examples:
                CustomerExample:
                  $ref: '#/components/examples/DoiAgentExample'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewatExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
  /{identifier}/vocabularies:
    get:
      summary: Gets vocabulary definition for a customer
      operationId: getVocabularies
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: identifier
          description: UUID identifier of the Customer
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CustomerIdentifier'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VocabularyList'
              examples:
                VocabularyListExample:
                  $ref: '#/components/examples/VocabularyListExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/VocabularyList'
              examples:
                VocabularyListExample:
                  $ref: '#/components/examples/VocabularyListExample'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetCustomerVocabulariesFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
    post:
      summary: Create vocabulary definition for customer
      operationId: createVocabularies
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: identifier
          description: UUID identifier of the Customer to update
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CustomerIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VocabularyList'
            examples:
              VocabulaaryListExample:
                $ref: '#/components/examples/VocabularyListExample'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/VocabularyList'
            examples:
              VocabulaaryListExample:
                $ref: '#/components/examples/VocabularyListExample'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateCustomerVocabulariesFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VocabularyList'
              examples:
                VocabularyListExample:
                  $ref: '#/components/examples/VocabularyListExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/VocabularyList'
              examples:
                VocabularyListExample:
                  $ref: '#/components/examples/VocabularyListExample'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewatExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
    put:
      summary: Update Vocabularies
      operationId: updateVocabularies
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend","https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: identifier
          description: UUID identifier of the Customer to update
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CustomerIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VocabularyList'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/VocabularyList'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdateCustomerVocabulariesFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VocabularyList'
              examples:
                VocabularyListExample:
                  $ref: '#/components/examples/VocabularyListExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/VocabularyList'
              examples:
                VocabularyListExample:
                  $ref: '#/components/examples/VocabularyListExample'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/NotFoundProblemExample'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewayExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
  /{identifier}/channel-claim:
    post:
      summary: Claim a channel for a customer
      operationId: PostChannelClaim
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: identifier
          description: UUID identifier of the Customer to claim the channel
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CustomerIdentifier'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelClaim'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/ChannelClaim'
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateChannelClaimFunction.Arn}/invocations
        responses: { }
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                UnauthorizedExample:
                  $ref: '#/components/examples/UnauthorizedProblemExample'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                ForbiddenExample:
                  $ref: '#/components/examples/ForbiddenProblemExample'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                NotFoundExample:
                  $ref: '#/components/examples/NotFoundProblemExample'
        '500':
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                InternalServerErrorExample:
                  $ref: '#/components/examples/InternalServerErrorProblemExample'
  /orgDomain/{orgDomain}:
    get:
      summary: Get CustomerIdentifiers by orgDomain
      operationId: getCustomerIdentifierByOrgDomain
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: orgDomain
          description: the Feide org domain of the CustomerIdentifiers to get
          required: true
          in: path
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetCustomerByOrgDomainFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerIdentifiers'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CustomerIdentifiers'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                NotFoundExample:
                  $ref: '#/components/examples/NotFoundProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewatExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
  /cristinId/{cristinId}:
    get:
      summary: Get Customer by cristinId
      operationId: getCustomerByCristinId
      security:
        - CognitoUserPool: [ "https://api.nva.unit.no/scopes/backend", "https://api.nva.unit.no/scopes/frontend", "aws.cognito.signin.user.admin" ]
      parameters:
        - name: cristinId
          description: CristinId of the Customer to get
          required: true
          in: path
          schema:
            type: string
            format: uri
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaGetCustomerByCristinIdFunction.Arn}/invocations
        responses: {}
        httpMethod: POST
        type: AWS_PROXY
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                objectExample:
                  $ref: '#/components/examples/CustomerExample'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                objectExample:
                  $ref: '#/components/examples/CustomerExample'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadRequestExample:
                  $ref: '#/components/examples/BadRequestProblemExample'
        '404':
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                NotFoundExample:
                  $ref: '#/components/examples/NotFoundProblemExample'
        '502':
          description: Bad Gateway
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                BadGatewatExample:
                  $ref: '#/components/examples/BadGatewayProblemExample'
components:
  securitySchemes:
    CognitoUserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Fn::GetAtt: UserPool.Arn
      description: Allows authenticated users to read data from customers table
  schemas:
    CustomerIdentifier:
      type: string
      format: uuid
      minimum: 1
      maximum: 1
    CustomerList:
      type: object
      properties:
        id:
          type: string
          format: uri
        type:
          type: string
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerReference'
        '@context':
          type: string
          format: uri
    CustomerIdentifiers:
      type: object
      properties:
        identifier:
          type: string
          format: uri
        cristinId:
          type: string
          format: uri
    NullRightsRetentionStrategy:
      type: object
      properties:
        type:
          type: string
          description: Always has the value 'NullRightsRetentionStrategy'
    RightsRetentionStrategy:
      type: object
      properties:
        type:
          type: string
          description: Always has the value 'RightsRetentionStrategy'
        id:
          type: string
          format: uri
          description: a link to the rights retention strategy for the customer
    OverridableRightsRetentionStrategy:
      type: object
      properties:
        type:
          type: string
          description: Always has the value 'OverridableRightsRetentionStrategy'
        id:
          type: string
          format: uri
          description: a link to the rights retention strategy for the customer
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uri
        identifier:
          $ref: '#/components/schemas/CustomerIdentifier'
        type:
          type: string
        createdDate:
          type: string
          format: date-time
        modifiedDate:
          type: string
          format: date-time
        name:
          type: string
        displayName:
          type: string
        shortName:
          type: string
        archiveName:
          type: string
        cname:
          type: string
        institutionDns:
          type: string
        feideOrganizationId:
          type: string
        cristinId:
          type: string
          format: uri
        customerOf:
          type: string
          description: the application scope the customer is part of, default value is 'nva.unit.no'
        vocabularies:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary'
        rorId:
          type: string
          format: uri
          description: the customers persistent identifier in the Research Organization Registry (ROR)
        serviceCenter:
          $ref: '#/components/schemas/ServiceCenter'
        doiAgent:
          $ref: '#/components/schemas/DoiAgent'
        '@context':
          type: object
        publicationWorkflow:
          type: string
          enum: [RegistratorPublishesMetadataOnly, RegistratorPublishesMetadataAndFiles, RegistratorRequiresApprovalForMetadataAndFiles]
        nviInstitution:
          type: boolean
          description: whether or not the institution is part of NVI reporting
        rboInstitution:
          type: boolean
          description: whether or not the institution is part of result-based redistribution
        generalSupportEnabled:
          type: boolean
          description: whether or not institution supports creation og GeneralSupportRequests in NVA
        inactiveFrom:
          type: string
          format: date-time
          description: the date the customer became inactive, if null the customer is still active
        sector:
          type: string
          enum:
            - UHI
            - HEALTH
            - INSTITUTE
            - ABM
            - OTHER
          description: what sector the customer is part of
        rightsRetentionStrategy:
          oneOf:
            - $ref: '#/components/schemas/NullRightsRetentionStrategy'
            - $ref: '#/components/schemas/RightsRetentionStrategy'
            - $ref: '#/components/schemas/OverridableRightsRetentionStrategy'
        allowFileUploadForTypes:
          type: array
          items:
            type: string
            enum:
              - AcademicArticle
              - AcademicChapter
              - AcademicLiteratureReview
              - AcademicMonograph
              - Anthology
              - Architecture
              - Artistic
              - ArtisticDesign
              - Book
              - BookAnthology
              - CaseReport
              - ChapterConferenceAbstract
              - ChapterInReport
              - ConferenceAbstract
              - ConferenceLecture
              - ConferencePoster
              - ConferenceReport
              - DataManagementPlan
              - DataSet
              - Degree
              - DegreeBachelor
              - DegreeLicentiate
              - DegreeMaster
              - DegreePhd
              - Encyclopedia
              - EncyclopediaChapter
              - Event
              - ExhibitionCatalog
              - ExhibitionCatalogChapter
              - ExhibitionContent
              - ExhibitionProduction
              - GeographicalContent
              - Introduction
              - Journal
              - JournalCorrigendum
              - JournalIssue
              - JournalLeader
              - JournalLetter
              - JournalReview
              - Lecture
              - LiteraryArts
              - Map
              - MediaBlogPost
              - MediaContribution
              - MediaFeatureArticle
              - MediaInterview
              - MediaParticipationInRadioOrTv
              - MediaPodcast
              - MediaReaderOpinion
              - MovingPicture
              - MusicPerformance
              - NonFictionChapter
              - NonFictionMonograph
              - OtherPresentation
              - OtherStudentWork
              - PerformingArts
              - PopularScienceArticle
              - PopularScienceChapter
              - PopularScienceMonograph
              - ProfessionalArticle
              - Report
              - ReportBasic
              - ReportBookOfAbstract
              - ReportPolicy
              - ReportResearch
              - ReportWorkingPaper
              - ResearchData
              - StudyProtocol
              - Textbook
              - TextbookChapter
              - VisualArts
            description: List of publication instance types the customer is allowed to upload files
    CustomerReference:
      type: object
      properties:
        id:
          type: string
          format: uri
        cristinId:
          type: string
          format: uri
        displayName:
          type: string
        createdDate:
          type: string
          format: date-time
        doiPrefix:
          type: string
        nviInstitution:
          type: boolean
    ChannelClaim:
      type: object
      required:
        - channel
        - constraints
      properties:
        channel:
          type: string
          format: uri
        constraints:
          type: object
          required:
            - publishingPolicy
            - editingPolicy
            - scope
          properties:
            publishingPolicy:
              $ref: '#/components/schemas/ChannelConstraintPolicy'
            editingPolicy:
              $ref: '#/components/schemas/ChannelConstraintPolicy'
            scope:
              type: array
              items:
                type: string
    ChannelConstraintPolicy:
      type: string
      enum:
        - OwnerOnly
        - Everyone
    DoiAgent:
      type: object
      properties:
        id:
          type: string
          format: uri
        prefix:
          type: string
        url:
          type: string
          format: url
        username:
          type: string
        password:
          type: string
    ServiceCenter:
      type: object
      properties:
        uri:
          type: string
          format: url
        name:
          type: string
    VocabularyList:
      type: object
      properties:
        id:
          type: string
          format: uri
        type:
          type: string
          enum: [VocabularyList]
        vocabularies:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary'
    Vocabulary:
      type: object
      properties:
        type:
          type: string
          enum: [Vocabulary]
        status:
          type: string
          enum: [disabled, enabled, default]
        id:
          type: string
          format: uri
        name:
          type: string
    Problem:
      type: object
      description: NVA error reporting object
      required:
        - title
        - detail
        - status
      properties:
        title:
          type: string
          description: Human-readable description of the error status
        detail:
          type: string
          description: A more detailed error message describing the error and potential mitigations
        status:
          type: integer
          description: The HTTP status code associated with the problem
        requestId:
          type: string
          description: Identifier of the request causing the problem
        instance:
          type: string
          description: The requested path associated with the error
        type:
          type: string
          description: A URI describing the error and mitigations, in generic cases, this is about:blank
  examples:
    CustomerExample:
      value:
        '@context': 'https://bibsysdev.github.io/src/customer-api.json'
        id: 'https://api.test.nva.unit.no/customers/3fa85f64-5717-4562-b3fc-2c963f66afa6'
        identifier: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
        type: Customer
        createdDate: '2021-05-07T14:29:04.144Z'
        modifiedDate: '2021-05-07T14:29:04.144Z'
        name: 'Universitet for norsk Reindrift'
        displayName: 'Universitet for Reindrift'
        shortName: 'UNIREIN'
        archiveName: 'unirein'
        cname: 'arkiv.unirein.no'
        institutionDns: 'unirein.no'
        feideOrganizationId: '111111111'
        cristinId: 'https://api.cristin.no/v2/institutions/11110'
        customerOf: 'nva.unit.no'
        vocabularies:
          - id: 'https://example.org/example#'
            type: 'Vocabulary'
            name: 'Example VOC'
            active: 'default'
        rorId: 'https://ror.org/026eeyk15'
        serviceCenter:
          uri: 'https://servicecenter.org/wiki/-/wiki/Orakeltjenesten'
          name: 'Sikt supportsenter'
        doiAgent:
          prefix: "1000.10"
          url: "test.nva.unit.no"
          username: "Doi Register Customer Name"
        publicationWorkflow: 'RegistratorPublishesMetadataAndFiles'
        nviInstitution: false
        rboInstitution: false
        generalSupportEnabled: true
        inactiveFrom: '2021-05-07T14:29:04.144Z'
        sector: UHI
        rightsRetentionStrategy:
          type: OverridableRightsRetentionStrategy
          id: 'https://unirein.no/rights-retention-strategy.html'
        allowFileUploadForTypes:
          - "AcademicArticle"
          - "AcademicChapter"
          - "AcademicLiteratureReview"
          - "AcademicMonograph"
          - "Anthology"
          - "Architecture"
          - "Artistic"
          - "ArtisticDesign"
          - "Book"
          - "BookAnthology"
          - "CaseReport"
          - "ChapterConferenceAbstract"
          - "ChapterInReport"
          - "ConferenceAbstract"
          - "ConferenceLecture"
          - "ConferencePoster"
          - "ConferenceReport"
          - "DataManagementPlan"
          - "DataSet"
          - "Degree"
          - "DegreeBachelor"
          - "DegreeLicentiate"
          - "DegreeMaster"
          - "DegreePhd"
          - "Encyclopedia"
          - "EncyclopediaChapter"
          - "Event"
          - "ExhibitionCatalog"
          - "ExhibitionCatalogChapter"
          - "ExhibitionContent"
          - "ExhibitionProduction"
          - "GeographicalContent"
          - "Introduction"
          - "Journal"
          - "JournalCorrigendum"
          - "JournalIssue"
          - "JournalLeader"
          - "JournalLetter"
          - "JournalReview"
          - "Lecture"
          - "LiteraryArts"
          - "Map"
          - "MediaBlogPost"
          - "MediaContribution"
          - "MediaFeatureArticle"
          - "MediaInterview"
          - "MediaParticipationInRadioOrTv"
          - "MediaPodcast"
          - "MediaReaderOpinion"
          - "MovingPicture"
          - "MusicPerformance"
          - "NonFictionChapter"
          - "NonFictionMonograph"
          - "OtherPresentation"
          - "OtherStudentWork"
          - "PerformingArts"
          - "PopularScienceArticle"
          - "PopularScienceChapter"
          - "PopularScienceMonograph"
          - "ProfessionalArticle"
          - "Report"
          - "ReportBasic"
          - "ReportBookOfAbstract"
          - "ReportPolicy"
          - "ReportResearch"
          - "ReportWorkingPaper"
          - "ResearchData"
          - "StudyProtocol"
          - "Textbook"
          - "TextbookChapter"
          - "VisualArts"
    CustomerListExample:
      value:
        '@context': 'https://bibsysdev.github.io/src/customer-api.json'
        id: 'https://api.test.nva.unit.no/customers'
        type: CustomerList
        customers:
          - id: 'https://api.test.nva.unit.no/customers/3fa85f64-5717-4562-b3fc-2c963f66afa6'
            cristinId: 'https://api.test.nva.aws.unit.no/cristin/organization/1.2.3.4'
            createdDate: '2021-05-07T14:29:04.144Z'
            active: true
            displayName: 'Universitet for Reindrift'
            doiPrefix: "1000.10"
            nviInstitution: false
    DoiAgentExample:
      value:
        id: 'https://example.com/example/#/doiagent'
        prefix: '1000.10'
        url: 'https://namespace.schema.org'
        username: 'Doi Registrar Username'
        password: '*******'
    VocabularyListExample:
      value:
        '@context': 'https://bibsysdev.github.io/src/customer-api.json'
        id: 'https://api.test.nva.unit.no/customers/3fa85f64-5717-4562-b3fc-2c963f66afa6/vocabularies'
        type: VocabularyList
        vocabularies:
          - type: Vocabulary
            active: default
            id: 'https://example.com/example#'
            name: Example VOC
    BadRequestProblemExample:
      value:
        type: about:blank
        status: 400
        title: Bad Request
        detail: 'Identifier is not a valid UUID: HelloWorld!'
        instance: /path/to/resource
    UnauthorizedProblemExample:
      value:
        type: about:blank
        status: 401
        title: Unauthorized
        detail: 'Unauthorized'
        instance: /path/to/resource
    ForbiddenProblemExample:
      value:
        type: about:blank
        status: 403
        title: Forbidden
        detail: 'Forbidden'
        instance: /path/to/resource
    NotFoundProblemExample:
      value:
        type: about:blank
        status: 404
        title: Not Found
        detail: The requested resource was not found
        instance: /path/to/resource
    InternalServerErrorProblemExample:
      value:
        type: about:blank
        status: 500
        title: Internal Server Error
        detail: 'Internal Server Error'
        instance: /path/to/resource
    BadGatewayProblemExample:
      value:
        type: about:blank
        status: 502
        title: Bad Gateway
        detail: 'Persistence service is unavailable'
        instance: /path/to/resource
